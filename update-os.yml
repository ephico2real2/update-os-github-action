name: OS Update

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:

concurrency:
  group: os-update
  cancel-in-progress: true

jobs:
  update-os:
    runs-on: ubuntu-latest
    env:
      RUN_OS_UPDATE: "false"
      REBOOT_IF_NEEDED: "false"
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && env.RUN_OS_UPDATE == 'true') }}
    timeout-minutes: 60
    
    outputs:
      upgrade_list: ${{ steps.parse_outputs.outputs.upgrade_list }}
      disk_space_before: ${{ steps.parse_outputs.outputs.disk_space_before }}
      disk_space_after: ${{ steps.parse_outputs.outputs.disk_space_after }}
      update_count: ${{ steps.parse_outputs.outputs.update_count }}
    
    steps:
      - id: update_os_step
        name: Update OS via SSH
        uses: appleboy/ssh-action@master
        env: 
          REBOOT_FLAG: ${{ env.REBOOT_IF_NEEDED }}
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            set -eo pipefail
            export NEEDRESTART_MODE=a
            export DEBIAN_FRONTEND=noninteractive
            
            # Generate unique output file ON REMOTE SERVER
            OUTPUT_FILE="/tmp/update_os_$(date +%s).txt"
            
            # Store the path for retrieval
            echo "OUTPUT_FILE_PATH=$OUTPUT_FILE" > /tmp/output_marker.txt
            
            # Disk check
            DISK_SPACE_BEFORE=$(df -h / | awk 'NR==2 {print $4}')
            AVAIL_SPACE_KB=$(df / | awk 'NR==2 {print $4}')
            (( $AVAIL_SPACE_KB < 1048576 )) && { echo "Insufficient disk space"; exit 1; }

            # Package operations
            sudo apt-get -qy clean
            sudo apt-get -qy update
            
            # Capture and redirect to file
            echo "upgrade_list=" >> "$OUTPUT_FILE"
            {
              sudo apt list --upgradable 2>/dev/null | grep -v "Listing..."
            } >> "$OUTPUT_FILE"
            
            UPDATE_COUNT=$(sudo apt list --upgradable 2>/dev/null | grep -v "Listing..." | wc -l)

            # Perform upgrade
            sudo apt-get -qy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade
            sudo apt-get -qy autoremove

            # Post-update
            DISK_SPACE_AFTER=$(df -h / | awk 'NR==2 {print $4}')

            # Write outputs
            {
              echo "disk_space_before=$DISK_SPACE_BEFORE"
              echo "disk_space_after=$DISK_SPACE_AFTER"
              echo "update_count=$UPDATE_COUNT"
            } >> "$OUTPUT_FILE"
            chmod 600 "$OUTPUT_FILE"

            # Reboot handling
            if [[ "$REBOOT_FLAG" = "true" && -f /var/run/reboot-required ]]; then
              sudo nohup reboot </dev/null &>/dev/null &
              exit 0
            fi

      - name: Extract Output File Path
        id: extract_path
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            cat /tmp/output_marker.txt 2>/dev/null || echo "No output file found"
        # Extract output file path
        run: |
          FILE_PATH=$(cat /tmp/output_marker.txt | grep "OUTPUT_FILE_PATH" | cut -d= -f2)
          echo "output_file=$FILE_PATH" >> $GITHUB_OUTPUT

      - name: Debug Output File Existence
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            FILE_PATH=$(cat /tmp/output_marker.txt | grep "OUTPUT_FILE_PATH" | cut -d= -f2)
            if [[ -f "$FILE_PATH" ]]; then
              echo "Output file exists: $FILE_PATH"
              ls -lah "$FILE_PATH"
              cat "$FILE_PATH"
            else
              echo "Output file does NOT exist!"
            fi

      - name: Retrieve Output File
        id: get_outputs
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            cat "${{ steps.extract_path.outputs.output_file }}" 2>/dev/null || echo "No output file found"

      - name: Parse Outputs
        id: parse_outputs
        run: |
          DISK_BEFORE=$(echo "${{ steps.get_outputs.outputs.result }}" | awk -F= '/disk_space_before=/ {print $2}')
          DISK_AFTER=$(echo "${{ steps.get_outputs.outputs.result }}" | awk -F= '/disk_space_after=/ {print $2}')
          UPDATE_COUNT=$(echo "${{ steps.get_outputs.outputs.result }}" | awk -F= '/update_count=/ {print $2}')
          
          UPGRADE_LIST=$(echo "${{ steps.get_outputs.outputs.result }}" | awk '/upgrade_list=/{flag=1; next} flag')
          
          echo "disk_space_before=${DISK_BEFORE:-Unknown}" >> $GITHUB_OUTPUT
          echo "disk_space_after=${DISK_AFTER:-Unknown}" >> $GITHUB_OUTPUT
          echo "update_count=${UPDATE_COUNT:-0}" >> $GITHUB_OUTPUT
          echo "upgrade_list=${UPGRADE_LIST:-No packages upgraded}" >> $GITHUB_OUTPUT
          
      - name: Create Job Summary
        if: always()
        run: |
          echo "## OS Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Updated ${{ steps.parse_outputs.outputs.update_count }} packages" >> $GITHUB_STEP_SUMMARY
            echo "💽 Disk space before: ${{ steps.parse_outputs.outputs.disk_space_before }}" >> $GITHUB_STEP_SUMMARY
            echo "💽 Disk space after: ${{ steps.parse_outputs.outputs.disk_space_after }}" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ steps.parse_outputs.outputs.upgrade_list }}" != "No packages upgraded" ]]; then
              echo "### 📦 Upgraded Packages" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "${{ steps.parse_outputs.outputs.upgrade_list }}" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Update failed! Check logs for details." >> $GITHUB_STEP_SUMMARY      

      - name: Cleanup Remote File
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            FILE_PATH=$(cat /tmp/output_marker.txt | grep "OUTPUT_FILE_PATH" | cut -d= -f2)
            rm -f "$FILE_PATH" || true
            rm -f /tmp/output_marker.txt || true
