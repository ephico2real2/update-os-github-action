name: OS Update

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 3 * * *"  # Runs daily at 3 AM UTC
  workflow_dispatch:
    inputs:
      run_os_update:
        description: "Run OS update manually"
        required: false
        default: "false"
      reboot_if_needed:
        description: "Reboot after update if needed"
        required: false
        default: "false"

concurrency:
  group: os-update
  cancel-in-progress: true

jobs:
  update-os:
    runs-on: ubuntu-latest
    env:
      RUN_OS_UPDATE: ${{ github.event.inputs.run_os_update }}
      REBOOT_IF_NEEDED: ${{ github.event.inputs.reboot_if_needed }}
    # Only run if:
    # - Manually triggered with RUN_OS_UPDATE=true
    # - Scheduled and RUN_OS_UPDATE=true
    # - Push to main branch and RUN_OS_UPDATE=true
    if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.run_os_update == 'true') || (github.event_name == 'schedule' && github.event.inputs.run_os_update == 'true') || (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.event.inputs.run_os_update == 'true') }}
    timeout-minutes: 60
    
    outputs:
      reboot_required: ${{ steps.set_output.outputs.reboot_required }}
    
    steps:
      - name: Check if Update Should Run
        id: check_update
        run: echo "RUN_OS_UPDATE is set to $RUN_OS_UPDATE"
        
      - name: Update OS via SSH and Generate Summary
        id: update_os_step
        uses: appleboy/ssh-action@master
        env: 
          RUN_OS_UPDATE: ${{ github.event.inputs.run_os_update }}
          REBOOT_IF_NEEDED: ${{ github.event.inputs.reboot_if_needed }}
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          envs: RUN_OS_UPDATE,REBOOT_IF_NEEDED
          script: |
            set -eo pipefail
            export NEEDRESTART_MODE=a
            export DEBIAN_FRONTEND=noninteractive
            
            # Generate unique output file ON REMOTE SERVER
            OUTPUT_FILE="/tmp/update_os_$(date +%s).txt"
            SUMMARY_FILE="/tmp/os_update_summary.txt"
            
            # Disk check
            DISK_SPACE_BEFORE=$(df -h / | awk 'NR==2 {print $4}')
            AVAIL_SPACE_KB=$(df / | awk 'NR==2 {print $4}')
            (( $AVAIL_SPACE_KB < 1048576 )) && { echo "Insufficient disk space"; exit 1; }

            # Package operations
            sudo apt-get -qy clean
            sudo apt-get -qy update
            
            # Capture and redirect to file
            echo "upgrade_list=" >> "$OUTPUT_FILE"
            {
              sudo apt list --upgradable 2>/dev/null | grep -v "Listing..."
            } >> "$OUTPUT_FILE"
            
            UPDATE_COUNT=$(sudo apt list --upgradable 2>/dev/null | grep -v "Listing..." | wc -l)

            # Perform upgrade
            sudo apt-get -qy -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade
            sudo apt-get -qy autoremove

            # Post-update
            DISK_SPACE_AFTER=$(df -h / | awk 'NR==2 {print $4}')

            # Write outputs
            {
              echo "disk_space_before=$DISK_SPACE_BEFORE"
              echo "disk_space_after=$DISK_SPACE_AFTER"
              echo "update_count=$UPDATE_COUNT"
            } >> "$OUTPUT_FILE"
            chmod 600 "$OUTPUT_FILE"

            # Check if reboot is needed and set output
            if [[ -f /var/run/reboot-required ]]; then
              echo "Reboot is required after update."
              echo "reboot_required=true" >> $GITHUB_ENV
            else
              echo "reboot_required=false" >> $GITHUB_ENV
            fi

      - name: Set Output for Reboot
        id: set_output
        run: echo "reboot_required=${{ env.REBOOT_IF_NEEDED }}" >> $GITHUB_ENV

      - name: Retrieve Remote Summary
        id: get_summary
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            cat /tmp/os_update_summary.txt 2>/dev/null || echo "No summary file found" > /tmp/local_summary.txt
        continue-on-error: true
        
      - name: Cleanup Remote Files
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            rm -f /tmp/update_os_*.txt
            rm -f /tmp/os_update_summary.txt
            echo "Temporary files cleaned up."

  reboot-if-needed:
    needs: update-os  # Ensure this runs after the update job is complete
    runs-on: ubuntu-latest
    env:
      REBOOT_IF_NEEDED: ${{ github.event.inputs.reboot_if_needed }}
    if: ${{ github.event.inputs.reboot_if_needed == 'true' }}
    steps:
      - name: Reboot Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          envs: REBOOT_IF_NEEDED
          script: |
            echo "REBOOT_IF_NEEDED is set to $REBOOT_IF_NEEDED"
            if [[ "$REBOOT_IF_NEEDED" == "true" ]]; then
              echo "Rebooting the server..."
              sudo nohup reboot </dev/null &>/dev/null &
            else
              echo "No reboot needed."
            fi

